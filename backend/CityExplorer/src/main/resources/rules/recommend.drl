package com.rules;
import com.sbnz.CityExplorer.model.Transportation;
import com.sbnz.CityExplorer.model.Location;
import com.sbnz.CityExplorer.model.Space;
import com.sbnz.CityExplorer.model.Keywords;
import com.sbnz.CityExplorer.model.ActivityRequirements;
import com.sbnz.CityExplorer.model.Features;
import com.sbnz.CityExplorer.model.Activity;
import com.sbnz.CityExplorer.dto.UserRequirementsDTO;
import java.time.LocalDate;

global List<Activity

rule "Start"
    agenda-group "requirements"
    salience 1000
    when
    	UserRequirementsDTO()
    	ActivityRequirements()
    	
    then
        System.out.println( "Started recommendation!" );
end


rule "Going with family"
	salience 100
	agenda-group "requirements"
	lock-on-active 
	when
		userRequirements: UserRequirementsDTO( companion=="FAMILY");
		activityRequirements: ActivityRequirements();
	then
		modify(activityRequirements){getFeatures().getKeywords().add(Keywords.FAMILY_FRIENDLY);};
		System.out.println(activityRequirements.toString());	
end;

rule "Family friendly keywords means childrens program"
	salience 80
	agenda-group "requirements"
	lock-on-active 
	when
		activityRequirements: ActivityRequirements( features.keywords  contains Keywords.FAMILY_FRIENDLY);
	then
		modify(activityRequirements){getFeatures().setChildrensProgram(true);};
		System.out.println(activityRequirements.toString());	
end;
rule "Special occasion with partner"
	salience 100
	agenda-group "requirements"
	when
		userRequirements: UserRequirementsDTO( special == true && companion == "PARTNER" );
		activityRequirements: ActivityRequirements();
	then
		modify(activityRequirements){getFeatures().getKeywords().add(Keywords.LUXURY);};
		modify(activityRequirements){getFeatures().getKeywords().add(Keywords.ROMANTIC);};
		System.out.println(activityRequirements.toString());	
end;

rule "Special occasion with colleagues "
	salience 100
	agenda-group "requirements"
	when
		userRequirements: UserRequirementsDTO( special == true && companion == "COLLEAGUES" );
		activityRequirements: ActivityRequirements();
	then
		modify(activityRequirements){getFeatures().getKeywords().add(Keywords.TEAMBUILDING);};
		System.out.println(activityRequirements.toString());	
end;

rule "Family friendly keywords means childrens program"
	salience 80
	agenda-group "requirements"
	no-loop  
	when
		activityRequirements: ActivityRequirements( features.keywords  contains Keywords.TEAMBUILDING);
	then
		modify(activityRequirements){getFeatures().setReservations(true);};
		System.out.println(activityRequirements.toString());	
end;


rule "Transportation by foot"
	salience 100
	agenda-group "requirements"
	when
		$userRequirements: UserRequirementsDTO( transportation == "BY_FOOT" )
		activityRequirements: ActivityRequirements()
	then
		modify(activityRequirements){setLocation(Location.StringToEnum("CITY_CENTER"))};
		System.out.println("Going by foot");	
end;

rule "Transportation by bus"
	salience 100
	agenda-group "requirements"
	when
		$userRequirements: UserRequirementsDTO( transportation == "BUS" )
		activityRequirements: ActivityRequirements()
	then
		modify(activityRequirements){getFeatures().setBusNearby(true);};
		System.out.println("Going by bus");	
end;
